<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:common="clr-namespace:UtilityControl.Common"
                    xmlns:convert="clr-namespace:UtilityControl.Convert"
                    xmlns:control="clr-namespace:UtilityControl.Control"
                    xmlns:model="clr-namespace:UtilityControl.Model">
    <!--TreeViewItem默认样式-->
    <Style  x:Key="DefaultTreeViewItem" TargetType="{x:Type TreeViewItem}">
        <Setter Property="MinHeight" Value="25" />
        <Setter Property="Foreground" Value="{DynamicResource CaptionForeground}" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Padding" Value="0,0,-5,0"></Setter>
        <Setter Property="common:ControlAttachProperty.UIconSize" Value="18"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TreeViewItem}">
                    <StackPanel>
                        <Grid>
                            <Border x:Name="Bd" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}" Padding="{TemplateBinding Padding}"
                                MinHeight="{TemplateBinding MinHeight}" UseLayoutRounding="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" >
                                <Grid Margin="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=TreeViewItem, AncestorLevel=1},Converter={x:Static convert:XConverter.TreeViewItemMarginLeftConverter}}" VerticalAlignment="Stretch">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <!--展开收缩按钮-->
                                    <ToggleButton Margin="30,0,0,0" x:Name="ExpanderBtn" 
                                              IsChecked="{Binding Path=IsExpanded, RelativeSource={x:Static RelativeSource.TemplatedParent}, Mode=TwoWay}"
                                              ClickMode="Press" Background="Transparent" VerticalAlignment="Center" VerticalContentAlignment="Center" >
                                        <ToggleButton.Template>
                                            <ControlTemplate TargetType="ToggleButton">
                                                <Border>
                                                    <ContentPresenter VerticalAlignment="Center" HorizontalAlignment="Center" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                                                </Border>
                                            </ControlTemplate>
                                        </ToggleButton.Template>
                                        <ToggleButton.Content>
                                            <Border Height="{Binding Path=ActualHeight,ElementName=Bd}">
                                                <TextBlock x:Name="ExpanderIcon"  Foreground="{TemplateBinding Foreground}" Text="&#xe605;" Style="{DynamicResource UIcon}"
                                                   FontSize="12" VerticalAlignment="Center" />
                                            </Border>
                                        </ToggleButton.Content>
                                    </ToggleButton>
                                    <!--内容-->
                                    <ContentPresenter x:Name="PART_Header" Grid.Column="1" ContentSource="Header"
                                                  SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                                  VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                                </Grid>
                            </Border>

                            <Path x:Name="path" Data="M50.000001,0.5 L99.500002,99.5 L0.50000004,99.5 z" Fill="White" HorizontalAlignment="Right" Height="12" Width="25" Stretch="Fill" Stroke="White" Margin="0,0,-10,0" Visibility="Collapsed" RenderTransformOrigin="0.5,0.5" >
                                <Path.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="-90" ></RotateTransform>
                                    </TransformGroup>
                                </Path.RenderTransform>
                            </Path>

                        </Grid>

                        <control:Reveal HorizontalReveal="None" VerticalReveal="FromTopToBottom" HorizontalAlignment="Stretch" VerticalAlignment="Top" IsExpanded="{TemplateBinding IsExpanded}">
                            <ItemsPresenter Width="{Binding ActualWidth,ElementName=Bd}" x:Name="ItemsHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </control:Reveal>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="False">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter TargetName="ExpanderIcon" Property="Text" Value="&#xe64b;" />
                        </Trigger>
                        <Trigger Property="HasItems" Value="False">
                            <Setter TargetName="ExpanderIcon" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="Bd">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ItemMouseOverBackground}" />
                            <Setter Property="Foreground" TargetName="ExpanderBtn" Value="{DynamicResource ItemMouseOverForeground}" />
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{DynamicResource ItemSelectedBackground}" />
                            <Setter Property="Foreground" TargetName="ExpanderBtn" Value="{DynamicResource ItemSelectedForeground}" />
                            <Setter Property="Visibility" TargetName="path" Value="Visible"></Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="True" />
                                <Condition Property="Selector.IsSelectionActive" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Background" Value="{DynamicResource ItemSelectedBackground}" />
                            <Setter Property="Foreground" Value="{DynamicResource ItemSelectedForeground}" />
                            <Setter Property="Visibility" TargetName="path" Value="Visible"></Setter>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <HierarchicalDataTemplate x:Key="ItemNode"  DataType="{x:Type model:TreeNode}" ItemsSource="{Binding Nodes}">
        <StackPanel Orientation="Horizontal" Height="28" Margin="5,0">
            <TextBlock Text="" Style="{DynamicResource UIcon}" ></TextBlock>
            <TextBlock Text="{Binding Name}" common:ControlAttachProperty.LanguageText="{Binding Name}" FontSize="13" VerticalAlignment="Center" Margin="3,0,0,0"></TextBlock>
        </StackPanel>
    </HierarchicalDataTemplate>

    <!--TreeView样式-->
    <Style x:Key="DefaultUTreeView" TargetType="{x:Type control:UTreeView}">
        <Setter Property="ScrollViewer.CanContentScroll" Value="False" />
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"></Setter>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Recycling" />
        <Setter Property="ScrollViewer.IsDeferredScrollingEnabled" Value="False" />
        <Setter Property="Background" Value="{DynamicResource ItemsContentBackground}"/>
        <Setter Property="BorderBrush" Value="Transparent"></Setter>
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="ItemContainerStyle" Value="{DynamicResource DefaultTreeViewItem}"></Setter>
        <Setter Property="ItemTemplate" Value="{StaticResource ItemNode}"></Setter>
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Disabled"/>
        <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <!--<local:ItemsPanel IsItemsHost="True" Margin="0"/>-->
                    <VirtualizingStackPanel ></VirtualizingStackPanel>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type control:UTreeView}" BasedOn="{StaticResource DefaultUTreeView}"></Style>

</ResourceDictionary>