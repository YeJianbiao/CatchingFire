<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:control="clr-namespace:UtilityControl.Control"
                    xmlns:common="clr-namespace:UtilityControl.Common"
                    xmlns:convert="clr-namespace:UtilityControl.Convert">

    
    <!--默认WindowBase的样式-->
    <Style x:Key="DefaultWindowStyle" TargetType="{x:Type control:WindowBase}">
        <Style.Resources>
            <Storyboard x:Key="ShowMain">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="{x:Null}">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0" />
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1" />
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0.4"></EasingDoubleKeyFrame>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"></EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                    <EasingDoubleKeyFrame KeyTime="0" Value="0.4"></EasingDoubleKeyFrame>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"></EasingDoubleKeyFrame>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>
        </Style.Resources>
        <Style.Triggers>
            <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                <BeginStoryboard Storyboard="{StaticResource ShowMain}"></BeginStoryboard>
            </EventTrigger>
        </Style.Triggers>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <TransformGroup>
                    <ScaleTransform></ScaleTransform>
                </TransformGroup>
            </Setter.Value>
        </Setter>
        <Setter Property="Opacity" Value="0"></Setter>
        <Setter Property="RenderTransformOrigin" Value="0.5,0.5"></Setter>
        <Setter Property="Background" Value="{DynamicResource WindowBackground}"/>
        <Setter Property="Foreground" Value="{DynamicResource TextForeground}"/>
        <Setter Property="FontSize" Value="{DynamicResource FontSize}"/>
        <Setter Property="FontFamily" Value="{DynamicResource FontFamily}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource WindowBorderBrush}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="UIconSize" Value="20"/>
        <Setter Property="CaptionHeight" Value="30"/>
        <Setter Property="MinHeight" Value="300"></Setter>
        <Setter Property="MinWidth" Value="500"></Setter>
        <Setter Property="ResizeMode" Value="CanResizeWithGrip"/>
        <Setter Property="CaptionBackground" Value="{DynamicResource CaptionBackground}" />
        <Setter Property="CaptionForeground" Value="{DynamicResource CaptionForeground}" />
        <Setter Property="UIcon" Value=""/>
        <Setter Property="MaxboxEnable" Value="True"/>
        <Setter Property="MinboxEnable" Value="True"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="common:ControlAttachProperty.CornerRadius" Value="0"/>
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome  CornerRadius="{TemplateBinding common:ControlAttachProperty.CornerRadius}"  CaptionHeight="{Binding Path=CaptionHeight,RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type control:WindowBase}}}" 
                                     ResizeBorderThickness="8"/>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type control:WindowBase}">
                    <Grid Margin="0" >
                        <!--背景-->
                        <Border x:Name="Bg" CornerRadius="{TemplateBinding common:ControlAttachProperty.CornerRadius}" 
                            Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" Effect="{DynamicResource WindowDropShadow}"
                            BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="5"  />
                        <Border  x:Name="BgInner" CornerRadius="{TemplateBinding common:ControlAttachProperty.CornerRadius}"                             Background="{DynamicResource WindowInnerBackground}" 
                            BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" Margin="5"  />
                        <Grid Margin="5">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>
                            <!--Caption标题部分-->
                            <Border Margin="0" Grid.Row="0" Background="{TemplateBinding CaptionBackground}" Height="{TemplateBinding CaptionHeight}">
                                <Grid Margin="2,1,2,0">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <!--Header部分-->
                                    <StackPanel HorizontalAlignment="{TemplateBinding TitleHorizontalAlignment}" Grid.Column="0" Grid.ColumnSpan="2" x:Name="PART_Header" Height="{TemplateBinding CaptionHeight}" Margin="5,1,5,1" Orientation="Horizontal" VerticalAlignment="Center" >
                                        <!--<TextBlock Style="{DynamicResource UIcon}" Foreground="{TemplateBinding CaptionForeground}" FontSize="{TemplateBinding UIconSize}" Text="{TemplateBinding UIcon}"/>-->
                                        <Image Visibility="{TemplateBinding IconVisibility}" Opacity="0.5" Source="/UtilityControl;component/Resource/Icon/logo_01.ico"></Image>
                                        <TextBlock VerticalAlignment="Center" Margin="5" FontSize="{DynamicResource HeaderFontSize}" Foreground="{TemplateBinding CaptionForeground}" Text="{TemplateBinding Title}"/>
                                    </StackPanel>
                                    <!--窗体功能按钮：最小、最大、关闭-->
                                    <StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Top" Margin="1" HorizontalAlignment="Right">
                                        <control:UButton x:Name="btnSet"  Width="26" VerticalAlignment="Center" Margin="1,2,1,2" Foreground="{TemplateBinding CaptionForeground}"
                                               Visibility="{Binding Path=SetboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static convert:XConverter.BooleanToVisibilityConverter}}"
                                               WindowChrome.IsHitTestVisibleInChrome="True" Style="{DynamicResource UButton_Transparency}"  UIcon="&#xe665;" UIconSize="12" 
                                               />
                                        <control:UButton x:Name="btnMin"  Width="26" VerticalAlignment="Center" Margin="1" 
                                               Visibility="{Binding Path=MinboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static convert:XConverter.BooleanToVisibilityConverter}}"
                                               Style="{DynamicResource UButton_Transparency}"  UIcon="&#xe60d;" UIconSize="12"
                                               WindowChrome.IsHitTestVisibleInChrome="True" Foreground="{TemplateBinding CaptionForeground}"
                                               Command="{Binding Path=MinimizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                        <control:UButton x:Name="btnMax"  Width="26" VerticalAlignment="Center" Margin="1" 
                                                Visibility="{Binding Path=MaxboxEnable,RelativeSource={RelativeSource TemplatedParent},Converter={x:Static convert:XConverter.BooleanToVisibilityConverter}}"
                                                Style="{DynamicResource UButton_Transparency}" UIcon="&#xe62b;" UIconSize="12"
                                                WindowChrome.IsHitTestVisibleInChrome="True" Foreground="{TemplateBinding CaptionForeground}"
                                               Command="{Binding Path=MaximizeWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>

                                        <control:UButton x:Name="btnClose"  Width="26" Height="26" VerticalAlignment="Center" Margin="1" CornerRadius="0" Padding="1 2 1 2"
                                               MouseOverBackground="Red" MouseOverForeground="White" PressedBackground="#AA0D0D" PressedForeground="White"
                                               AllowsAnimation="True" Style="{DynamicResource UButton_Transparency}"  UIcon="&#xe60a;" UIconSize="10"
                                               WindowChrome.IsHitTestVisibleInChrome="True" UIconMargin="0" Foreground="{TemplateBinding CaptionForeground}"
                                               Command="{Binding Path=CloseWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>
                                    </StackPanel>
                                    <control:PopupExtession x:Name="mask" IsOpen="False" Topmost="False" Placement="Center" >
                                        <Border Width="{Binding ActualWidth,ElementName=Bg}" Background="#000000" Opacity="0.4"></Border>
                                    </control:PopupExtession>
                                </Grid>
                            </Border>
                            <!--窗体内容区域-->
                            <AdornerDecorator Grid.Row="1" Margin="0">
                                <Grid>
                                    <ContentPresenter Content="{TemplateBinding Content}" />
                                    <control:UButton Visibility="Collapsed" x:Name="btnContentClose"  Width="26" Height="26" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="1" CornerRadius="0" Padding="1 2 1 2"
                                               MouseOverBackground="Red" MouseOverForeground="White" PressedBackground="#AA0D0D" PressedForeground="White"
                                               AllowsAnimation="True" Style="{DynamicResource UButton_Transparency}"  UIcon="&#xe60a;" UIconSize="10"
                                               WindowChrome.IsHitTestVisibleInChrome="True" UIconMargin="0" Foreground="{TemplateBinding CaptionForeground}"
                                               Command="{Binding Path=CloseWindowCommand,RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Grid>
                                
                            </AdornerDecorator>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="WindowState" Value="Maximized">
                            <Setter Property="UIcon" TargetName="btnMax" Value="&#xe62b;"></Setter>
                        </Trigger>
                        <Trigger Property="WindowState" Value="Normal">
                            <Setter Property="UIcon" TargetName="btnMax" Value="&#xe65b;"></Setter>
                        </Trigger>
                        <Trigger Property="CaptionHeight" Value="0">
                            <Setter Property="Visibility" TargetName="btnContentClose" Value="Visible"></Setter>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type control:WindowBase}" BasedOn="{StaticResource DefaultWindowStyle}"></Style>
</ResourceDictionary>